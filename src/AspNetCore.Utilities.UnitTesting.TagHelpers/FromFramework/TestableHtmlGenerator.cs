// <auto-generated>
// Copied from https://github.com/dotnet/aspnetcore/blob/v6.0.6/src/Mvc/Mvc.TagHelpers/test/TestableHtmlGenerator.cs
// Standard Changes:
//  - Pulling out global usings
//  - Using file scoped namespaces
//  - Changing of the namespace
// File Specific:
//  - Disable warning CS1591 about XML docs
// </auto-generated>

using Microsoft.AspNetCore.Antiforgery;
using Microsoft.AspNetCore.Mvc.Abstractions;
using Microsoft.AspNetCore.Mvc.Routing;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.Extensions.WebEncoders.Testing;
using Moq;

namespace ICG.AspNetCore.Utilities.UnitTesting.TagHelpers.FromFramework;

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
public class TestableHtmlGenerator : DefaultHtmlGenerator
{
    private readonly IDictionary<string, object> _validationAttributes;

    public TestableHtmlGenerator(IModelMetadataProvider metadataProvider)
        : this(metadataProvider, Mock.Of<IUrlHelper>())
    {
    }

    public TestableHtmlGenerator(IModelMetadataProvider metadataProvider, IUrlHelper urlHelper)
        : this(
              metadataProvider,
              GetOptions(),
              urlHelper,
              validationAttributes: new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase))
    {
    }

    public TestableHtmlGenerator(
        IModelMetadataProvider metadataProvider,
        IOptions<MvcViewOptions> options,
        IUrlHelper urlHelper,
        IDictionary<string, object> validationAttributes)
        : base(
              Mock.Of<IAntiforgery>(),
              options,
              metadataProvider,
              CreateUrlHelperFactory(urlHelper),
              new HtmlTestEncoder(),
              new DefaultValidationHtmlAttributeProvider(options, metadataProvider, new ClientValidatorCache()))
    {
        _validationAttributes = validationAttributes;
    }

    public IDictionary<string, object> ValidationAttributes
    {
        get { return _validationAttributes; }
    }

    public static ViewContext GetViewContext(
        object model,
        IHtmlGenerator htmlGenerator,
        IModelMetadataProvider metadataProvider)
    {
        return GetViewContext(model, htmlGenerator, metadataProvider, modelState: new ModelStateDictionary());
    }

    public static ViewContext GetViewContext(
        object model,
        IHtmlGenerator htmlGenerator,
        IModelMetadataProvider metadataProvider,
        ModelStateDictionary modelState)
    {
        var actionContext = new ActionContext(
            new DefaultHttpContext(),
            new RouteData(),
            new ActionDescriptor(),
            modelState);
        var viewData = new ViewDataDictionary(metadataProvider, modelState)
        {
            Model = model,
        };
        var viewContext = new ViewContext(
            actionContext,
            Mock.Of<IView>(),
            viewData,
            Mock.Of<ITempDataDictionary>(),
            TextWriter.Null,
            new HtmlHelperOptions());

        return viewContext;
    }

    public override IHtmlContent GenerateAntiforgery(ViewContext viewContext)
    {
        var tagBuilder = new TagBuilder("input")
        {
            Attributes =
                {
                    { "name", "__RequestVerificationToken" },
                    { "type", "hidden" },
                    { "value", "olJlUDjrouRNWLen4tQJhauj1Z1rrvnb3QD65cmQU1Ykqi6S4" }, // 50 chars of a token.
                },
        };

        tagBuilder.TagRenderMode = TagRenderMode.SelfClosing;
        return tagBuilder;
    }

    protected override void AddValidationAttributes(
        ViewContext viewContext,
        TagBuilder tagBuilder,
        ModelExplorer modelExplorer,
        string expression)
    {
        tagBuilder.MergeAttributes(ValidationAttributes);
    }

    private static IOptions<MvcViewOptions> GetOptions()
    {
        var mockOptions = new Mock<IOptions<MvcViewOptions>>();
        mockOptions
            .SetupGet(options => options.Value)
            .Returns(new MvcViewOptions());

        return mockOptions.Object;
    }

    private static IUrlHelperFactory CreateUrlHelperFactory(IUrlHelper urlHelper)
    {
        var factory = new Mock<IUrlHelperFactory>();
        factory
            .Setup(f => f.GetUrlHelper(It.IsAny<ActionContext>()))
            .Returns(urlHelper);

        return factory.Object;
    }
}
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member